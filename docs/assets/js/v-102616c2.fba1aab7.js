"use strict";(self.webpackChunkaaa=self.webpackChunkaaa||[]).push([[574],{3893:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-102616c2",path:"/guide/js%E9%AB%98%E7%BA%A7/%E5%8E%9F%E5%9E%8B%E9%93%BE%E8%A1%A5%E5%85%85.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"原型链补充",slug:"原型链补充",children:[]}],filePathRelative:"guide/js高级/原型链补充.md",git:{}}},1452:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(6252).uE)('<h2 id="原型链补充" tabindex="-1"><a class="header-anchor" href="#原型链补充" aria-hidden="true">#</a> 原型链补充</h2><h4 id="所有函数中都有prototype属性-它默认指向object空对象-object例外" tabindex="-1"><a class="header-anchor" href="#所有函数中都有prototype属性-它默认指向object空对象-object例外" aria-hidden="true">#</a> 所有函数中都有prototype属性,它默认指向object空对象（object例外）</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token comment">//true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token comment">//false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token comment">//null</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="所有的函数都是new-function的实例" tabindex="-1"><a class="header-anchor" href="#所有的函数都是new-function的实例" aria-hidden="true">#</a> 所有的函数都是new Function的实例</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Fn <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token comment">//true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Fn<span class="token punctuation">.</span>__proto__<span class="token operator">===</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token comment">//true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> Function<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token comment">//true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="object原型对象是原型链的最后一层-根据隐式原型查找-由于object的-proto-是null-所以无法在向下查找" tabindex="-1"><a class="header-anchor" href="#object原型对象是原型链的最后一层-根据隐式原型查找-由于object的-proto-是null-所以无法在向下查找" aria-hidden="true">#</a> object原型对象是原型链的最后一层,根据隐式原型查找,由于object的__proto__是null,所以无法在向下查找</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token comment">//null</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',7),p={},e=(0,a(3744).Z)(p,[["render",function(n,s){return t}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);