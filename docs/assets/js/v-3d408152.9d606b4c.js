"use strict";(self.webpackChunkaaa=self.webpackChunkaaa||[]).push([[7399],{5340:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-3d408152",path:"/guide/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/%E6%89%8B%E5%86%99%E9%A2%98/instanceof.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"instanceof",slug:"instanceof",children:[]}],filePathRelative:"guide/面试刷题/手写题/instanceof.md",git:{}}},3682:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h2 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof" aria-hidden="true">#</a> instanceof</h2><p><code>instanceof</code> 运算符用来检测 <code>constructor.prototype </code>是否存在于参数 <code>object</code> 的原型链上</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//树结构查询</span>\n<span class="token keyword">function</span> <span class="token function">myInstanceof</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span>right</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> p1 <span class="token operator">=</span> left<span class="token punctuation">.</span>__proto__\n    <span class="token keyword">while</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> right<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span>\n        <span class="token punctuation">}</span>\n        p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>__proto__\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//递归查询</span>\n<span class="token keyword">function</span> <span class="token function">myInstanceof</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span>right</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>__proto__ <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n       <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> right<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">{</span>\n           <span class="token keyword">return</span> <span class="token boolean">true</span>\n       <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n           <span class="token keyword">return</span> <span class="token function">myInstanceof</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>__proto__<span class="token punctuation">,</span>right<span class="token punctuation">)</span>\n       <span class="token punctuation">}</span>\n   <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n       <span class="token keyword">return</span> <span class="token boolean">false</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',4),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);