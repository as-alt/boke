"use strict";(self.webpackChunkaaa=self.webpackChunkaaa||[]).push([[4477],{4798:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-433cfdb2",path:"/guide/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/JAVASCRIPT/js%E9%A2%84%E7%BC%96%E8%AF%91.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"隐式转换",slug:"隐式转换",children:[]}],filePathRelative:"guide/面试刷题/JAVASCRIPT/js预编译.md",git:{}}},7698:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h2 id="隐式转换" tabindex="-1"><a class="header-anchor" href="#隐式转换" aria-hidden="true">#</a> 隐式转换</h2><p>当使用相等==或+相加会造成隐式转换</p><h4 id="隐式转换规则" tabindex="-1"><a class="header-anchor" href="#隐式转换规则" aria-hidden="true">#</a> 隐式转换规则</h4><h4 id="_1字符串与数值相比较" tabindex="-1"><a class="header-anchor" href="#_1字符串与数值相比较" aria-hidden="true">#</a> 1字符串与数值相比较</h4><pre><code>  - 将字符串转换为数值类型再比较\n  - 空字符串会转换为0,数值字符串转换为数值,其他转为NAN\n</code></pre><h4 id="_2布尔类型与其他类型相比较" tabindex="-1"><a class="header-anchor" href="#_2布尔类型与其他类型相比较" aria-hidden="true">#</a> 2布尔类型与其他类型相比较</h4><pre><code>  - 只要布尔类型参与比较，该布尔类型就会率先被转成数字类型\n  - true转换为1，false转换为0\n</code></pre><h4 id="_3null类型和undefined类型与其他类型相比较" tabindex="-1"><a class="header-anchor" href="#_3null类型和undefined类型与其他类型相比较" aria-hidden="true">#</a> 3null类型和undefined类型与其他类型相比较</h4><pre><code>  - null与undefined相等，并且与自身相等\n  - 与其他任意类型都不相等\n</code></pre><h4 id="_4对象与原始类型相比较" tabindex="-1"><a class="header-anchor" href="#_4对象与原始类型相比较" aria-hidden="true">#</a> 4对象与原始类型相比较</h4><pre><code>  - 对象先通过valueof()方法转换,如果转换后时原始类型,则直接返回，如果不是原始类型则通过toString()方法转换,原始值返回,不是就报错\n</code></pre><h4 id="_5对象与对象相比较" tabindex="-1"><a class="header-anchor" href="#_5对象与对象相比较" aria-hidden="true">#</a> 5对象与对象相比较</h4><pre><code>  - 判断两个对象的存放在栈的地址值是否指向堆内的同一个对象,如果是则为true,不是为false\n</code></pre><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[]=![]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">&#39;true&#39;</span><span class="token punctuation">)</span> <span class="token comment">//true</span>\n        <span class="token comment">/*\n            转换步骤\n            1.由于取非运算符优先与相等运算符,所以 [] == false\n            2.当布尔值与其他类型比较时,布尔类型被率先转换为数值类型 [] == 0\n            3.当对象类型与原始类型相比较时,对象类型根据规则转换为原始类型 &#39;&#39; == 0\n            4.当字符串与数值比较时,字符串转为数值类型,空字符串转换为0     0 == 0\n        */</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[] == 0</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&#39;true&#39;</span><span class="token punctuation">)</span> <span class="token comment">//true</span>\n        <span class="token comment">/*\n            1.当对象类型与原始类型相比较时,对象类型根据规则转换为原始类型 &#39;&#39; == 0\n            2.当字符串与数值比较时,字符串转为数值类型,空字符串转换为0     0 == 0\n        */</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[2] == 2</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;true&#39;</span><span class="token punctuation">)</span> <span class="token comment">//true</span>\n        <span class="token comment">/*\n            1.当对象类型与原始类型相比较时,对象类型根据规则转换为原始类型 &#39;2&#39; == 2\n            2.当字符串与数值比较时,字符串转为数值类型,字符串数值转换为数值  2 == 2\n        */</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[&#39;0&#39;] == false</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">&#39;true&#39;</span><span class="token punctuation">)</span> <span class="token comment">//true</span>\n        <span class="token comment">/*\n            1.当布尔值与其他类型比较时,布尔类型被率先转换为数值类型 [&#39;0&#39;] == 0\n            2.当对象类型与原始类型相比较时,对象类型根据规则转换为原始类型 &#39;0&#39; == 0\n            3.当字符串与数值比较时,字符串转为数值类型,字符串数值转换为数值 0 == 0\n        */</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&#39;0&#39; == false</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">&#39;true&#39;</span><span class="token punctuation">)</span> <span class="token comment">//true</span>\n        <span class="token comment">/*\n            1.当布尔值与其他类型比较时,布尔类型被率先转换为数值类型 &#39;0&#39; == 0\n            2.当字符串与数值比较时,字符串转为数值类型,字符串数值转换为数值 0 == 0\n        */</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[] == false</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">&#39;true&#39;</span><span class="token punctuation">)</span> <span class="token comment">//true</span>\n        <span class="token comment">/*\n            1.当布尔值与其他类型比较时,布尔类型被率先转换为数值类型 [] == 0\n            2.当对象类型与原始类型相比较时,对象类型根据规则转换为原始类型 &#39;&#39; == 0\n            3.当字符串与数值比较时,字符串转为数值类型,空字符串转换为0     0 == 0\n        */</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[null] == 0</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&#39;true&#39;</span><span class="token punctuation">)</span> <span class="token comment">//true</span>\n        <span class="token comment">/*\n            1.当对象类型与原始类型相比较时,对象类型根据规则转换为原始类型 &#39;&#39; == 0\n            2.当字符串与数值比较时,字符串转为数值类型,空字符串转换为0     0 == 0\n        */</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">undefined == 0</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&#39;false&#39;</span><span class="token punctuation">)</span> <span class="token comment">//false</span>\n        <span class="token comment">/*\n            null和undefined与其他类型不相等\n        */</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">null == false</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">&#39;false&#39;</span><span class="token punctuation">)</span> <span class="token comment">//false</span>\n        <span class="token comment">/*\n            null和undefined与其他类型不相等\n        */</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[undefined] == false</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">undefined</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">&#39;true&#39;</span><span class="token punctuation">)</span><span class="token comment">//true</span>\n        <span class="token comment">/*\n            1.当对象类型与原始类型相比较时,对象类型根据规则转换为原始类型 &#39;&#39; == 0\n            2.当字符串与数值比较时,字符串转为数值类型,空字符串转换为0     0 == 0\n        */</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">undefined == false</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">&#39;false&#39;</span><span class="token punctuation">)</span> <span class="token comment">//false</span>\n        <span class="token comment">/*\n            null和undefined与其他类型不相等\n        */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br></div></div>',14),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);