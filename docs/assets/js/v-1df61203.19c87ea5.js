"use strict";(self.webpackChunkaaa=self.webpackChunkaaa||[]).push([[2530],{5433:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-1df61203",path:"/guide/js%E9%AB%98%E7%BA%A7/%E6%98%BE%E5%BC%8F%E5%8E%9F%E5%9E%8B%E5%92%8C%E9%9A%90%E5%BC%8F%E5%8E%9F%E5%9E%8B.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"显式原型和隐式原型",slug:"显式原型和隐式原型",children:[]}],filePathRelative:"guide/js高级/显式原型和隐式原型.md",git:{}}},4622:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h2 id="显式原型和隐式原型" tabindex="-1"><a class="header-anchor" href="#显式原型和隐式原型" aria-hidden="true">#</a> 显式原型和隐式原型</h2><h4 id="函数内部都会自动生成prototype属性-默认是一个object空对象-没有自己定义的值-也被称为显式原型" tabindex="-1"><a class="header-anchor" href="#函数内部都会自动生成prototype属性-默认是一个object空对象-没有自己定义的值-也被称为显式原型" aria-hidden="true">#</a> 函数内部都会自动生成prototype属性,默认是一个object空对象（没有自己定义的值）,也被称为显式原型</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Fun</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token comment">//见下图</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="/boke/js高级/显式原型和隐式原型1.png" alt=""></p><h4 id="对象内部都会自动生成-proto-属性-默认继承object原型属性-也被称为隐式原型" tabindex="-1"><a class="header-anchor" href="#对象内部都会自动生成-proto-属性-默认继承object原型属性-也被称为隐式原型" aria-hidden="true">#</a> 对象内部都会自动生成__proto__属性,默认继承object原型属性,也被称为隐式原型</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token comment">//见下图</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="/boke/js高级/显式原型和隐式原型2.png" alt=""></p><h4 id="实例对象上的-proto-隐式原型-等于构造函数内的prototype-显式原型-所以可以使用函数原型上定义的方法和属性" tabindex="-1"><a class="header-anchor" href="#实例对象上的-proto-隐式原型-等于构造函数内的prototype-显式原型-所以可以使用函数原型上定义的方法和属性" aria-hidden="true">#</a> 实例对象上的__proto__(隐式原型)等于构造函数内的prototype（显式原型）,所以可以使用函数原型上定义的方法和属性</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//内部操作:this.prototype = {}</span>\n    \n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> fun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//内部操作:this.__proto__ = Fun.prototype</span>\n<span class="token class-name">Fun</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;小陈&#39;</span>\n<span class="token class-name">Fun</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">test</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Fun</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> fun<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token comment">//true</span>\nfun<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//小陈</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="内存结构图" tabindex="-1"><a class="header-anchor" href="#内存结构图" aria-hidden="true">#</a> 内存结构图</h4><p><img src="/boke/js高级/显式原型和隐式原型3.png" alt=""></p>',11),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);