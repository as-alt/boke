"use strict";(self.webpackChunkaaa=self.webpackChunkaaa||[]).push([[306],{7617:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-464b2f14",path:"/guide/js%E9%AB%98%E7%BA%A7/%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84prototype%E5%8E%9F%E5%9E%8B.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"函数中的prototype",slug:"函数中的prototype",children:[]}],filePathRelative:"guide/js高级/函数中的prototype原型.md",git:{}}},5328:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h2 id="函数中的prototype" tabindex="-1"><a class="header-anchor" href="#函数中的prototype" aria-hidden="true">#</a> 函数中的prototype</h2><h4 id="所有函数中都有prototype属性-它默认指向object空对象" tabindex="-1"><a class="header-anchor" href="#所有函数中都有prototype属性-它默认指向object空对象" aria-hidden="true">#</a> 所有函数中都有prototype属性,它默认指向object空对象</h4><p>1.如果未往原型上添加方法或属性,那么prototype内只有一个consructor</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Fun</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token comment">//见下图</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="/boke/js高级/函数内的prototype1.png" alt=""></p><p>2.可以往原型内添加属性或方法</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \n<span class="token punctuation">}</span>\n<span class="token class-name">Fun</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test()&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Fun</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token comment">//见下图</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><img src="/boke/js高级/函数内的prototype2.png" alt=""></p><h4 id="portotype原型上的constructor指回函数对象" tabindex="-1"><a class="header-anchor" href="#portotype原型上的constructor指回函数对象" aria-hidden="true">#</a> portotype原型上的constructor指回函数对象</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Fun</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Fun<span class="token punctuation">)</span><span class="token comment">//true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="原型上定义的属性和方法可以给实例使用" tabindex="-1"><a class="header-anchor" href="#原型上定义的属性和方法可以给实例使用" aria-hidden="true">#</a> 原型上定义的属性和方法可以给实例使用</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \n<span class="token punctuation">}</span>\n<span class="token class-name">Fun</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;小陈&#39;</span>\n<span class="token class-name">Fun</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">test</span><span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> fun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nfun<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//&#39;小陈&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',12),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);