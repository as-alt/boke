"use strict";(self.webpackChunkaaa=self.webpackChunkaaa||[]).push([[3975],{5849:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-34212aff",path:"/guide/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/VUE/%E5%8E%9F%E7%90%86/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"响应式原理",slug:"响应式原理",children:[]}],filePathRelative:"guide/面试刷题/VUE/原理/响应式原理.md",git:{}}},2669:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h2 id="响应式原理" tabindex="-1"><a class="header-anchor" href="#响应式原理" aria-hidden="true">#</a> 响应式原理</h2><p>利用了Object.defineProperty()方法监听属性的改变,但此方法会有缺陷,无法监听数组的变化,无法深度监听对象的变化，可以使用下面的解决办法</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span><span class="token punctuation">{</span>\n    name<span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>\n    family<span class="token operator">:</span><span class="token punctuation">{</span>\n        father<span class="token operator">:</span><span class="token string">&#39;张二&#39;</span><span class="token punctuation">,</span>\n        mather<span class="token operator">:</span><span class="token string">&#39;李四&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    like<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;骑行&#39;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//数组监听解决方案,重写数组方法</span>\n<span class="token keyword">let</span> arrayPototype <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype\n<span class="token comment">//保证其他数组方法无影响</span>\n<span class="token keyword">let</span> arrObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>arrayPototype<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">[</span><span class="token string">&#39;push&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;pop&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;unshift&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    arrObj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        arrayPototype<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>\n        <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">//模拟属性修改后的视图更新</span>\n<span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;视图更新&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//遍历对象</span>\n<span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> obj\n    <span class="token punctuation">}</span>\n    <span class="token comment">//如果为数组类型将隐式原型指向重写的对象</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        obj<span class="token punctuation">.</span>_proto_ <span class="token operator">=</span> arrObj\n    <span class="token punctuation">}</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">observeKey</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>key<span class="token punctuation">,</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//监听对象内的每一个值</span>\n<span class="token keyword">function</span> <span class="token function">observeKey</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//深度监听对象解决方案,如果属性值为引用类型则递归调用</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">observe</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span>key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> value\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            value <span class="token operator">=</span> newValue\n            <span class="token comment">//修改属性后触发视图更新</span>\n            <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div>',3),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);