"use strict";(self.webpackChunkaaa=self.webpackChunkaaa||[]).push([[42],{5430:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-536a27a8",path:"/guide/js%E9%AB%98%E7%BA%A7/%E6%95%B0%E6%8D%AE_%E5%8F%98%E9%87%8F_%E5%86%85%E5%AD%98%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"数据-变量-内存相关问题",slug:"数据-变量-内存相关问题",children:[]}],filePathRelative:"guide/js高级/数据_变量_内存相关问题.md",git:{}}},7762:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h2 id="数据-变量-内存相关问题" tabindex="-1"><a class="header-anchor" href="#数据-变量-内存相关问题" aria-hidden="true">#</a> 数据-变量-内存相关问题</h2><h4 id="变量赋值问题" tabindex="-1"><a class="header-anchor" href="#变量赋值问题" aria-hidden="true">#</a> 变量赋值问题</h4><p>当多个变量使用同一个地址值指向对象时,只要一个修改或新增,其他变量也会更改</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&#39;小陈&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>\nobj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;小李&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment">//小李</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>当使用函数改变参数时,如果是将实参赋值给形参,会重新开辟一个内存空间存放对象,他们指向的对象也不相同,所以即使函数内对象的参数改变，对外部的对象并没有影响</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&#39;小陈&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&#39;小李&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">fn</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment">//小陈</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><img src="/boke/js高级/变量赋值问题.png" alt=""></p><p>当函数改变参数时,直接修改实参内的对象参数时,对外部的对象也有影响</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&#39;小陈&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;小李&quot;</span>\n<span class="token punctuation">}</span>\n<span class="token function">fn</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment">//小李</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="js调用函数时是值传递还是引用传递" tabindex="-1"><a class="header-anchor" href="#js调用函数时是值传递还是引用传递" aria-hidden="true">#</a> js调用函数时是值传递还是引用传递</h4><p>理解1:当参数是基本类型是传递的是基本数据值本身(值传递),当参数是引用类型是传递的是对象的地址值（值传递）</p><p>理解2:当参数是基本类型是传递的是基本数据值本身(值传递),当参数是引用类型是传递的是对象的地址值指向这堆内存所存储的对象（引用传递）</p>',12),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);