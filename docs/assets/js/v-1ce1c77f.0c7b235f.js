"use strict";(self.webpackChunkaaa=self.webpackChunkaaa||[]).push([[3197],{5631:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-1ce1c77f",path:"/guide/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/VUE/%E5%8E%9F%E7%90%86/%E8%99%9A%E6%8B%9FDOM%E5%92%8Cdiff%E7%AE%97%E6%B3%95.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"虚拟DOM和diff算法",slug:"虚拟dom和diff算法",children:[{level:3,title:"虚拟DOM",slug:"虚拟dom",children:[]},{level:3,title:"diff算法",slug:"diff算法",children:[]},{level:3,title:"diff算法的原理",slug:"diff算法的原理",children:[]},{level:3,title:"核心方法",slug:"核心方法",children:[]},{level:3,title:"sameVnode方法",slug:"samevnode方法",children:[]},{level:3,title:"patchVnode方法",slug:"patchvnode方法",children:[]},{level:3,title:"updateChildren方法",slug:"updatechildren方法",children:[]}]}],filePathRelative:"guide/面试刷题/VUE/原理/虚拟DOM和diff算法.md",git:{}}},532:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var p=a(6252);const e=(0,p.uE)('<h2 id="虚拟dom和diff算法" tabindex="-1"><a class="header-anchor" href="#虚拟dom和diff算法" aria-hidden="true">#</a> 虚拟DOM和diff算法</h2><h3 id="虚拟dom" tabindex="-1"><a class="header-anchor" href="#虚拟dom" aria-hidden="true">#</a> 虚拟DOM</h3><p>虚拟DOM是一个用来表示真实DOM的对象</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>//真实DOM\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>item1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>item2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>用虚拟DOM表示</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> oldVNode <span class="token operator">=</span> <span class="token punctuation">{</span>\n    tagName<span class="token operator">:</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span>\n    props<span class="token operator">:</span><span class="token punctuation">{</span>\n        id<span class="token operator">:</span><span class="token string">&#39;list&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    children<span class="token operator">:</span><span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            tagName<span class="token operator">:</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span>\n            props<span class="token operator">:</span><span class="token punctuation">{</span>\n                className<span class="token operator">:</span><span class="token string">&#39;item&#39;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            children<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;item1&#39;</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n            tagName<span class="token operator">:</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span>\n            props<span class="token operator">:</span><span class="token punctuation">{</span>\n                className<span class="token operator">:</span><span class="token string">&#39;item&#39;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            children<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;item2&#39;</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>当修改li标签内容时</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>item1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>嘿嘿<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这是时新生成的虚拟DOM是</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> oldVNode <span class="token operator">=</span> <span class="token punctuation">{</span>\n    tagName<span class="token operator">:</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span>\n    props<span class="token operator">:</span><span class="token punctuation">{</span>\n        id<span class="token operator">:</span><span class="token string">&#39;list&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    children<span class="token operator">:</span><span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            tagName<span class="token operator">:</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span>\n            props<span class="token operator">:</span><span class="token punctuation">{</span>\n                className<span class="token operator">:</span><span class="token string">&#39;item&#39;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            children<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;item1&#39;</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n            tagName<span class="token operator">:</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span>\n            props<span class="token operator">:</span><span class="token punctuation">{</span>\n                className<span class="token operator">:</span><span class="token string">&#39;item&#39;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            children<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;嘿嘿&#39;</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>如果仅仅只是使用虚拟DOM渲染真实DOM,速度并不一定会比直接操作真实DOM快，所以要搭配diff算法使用</p><h3 id="diff算法" tabindex="-1"><a class="header-anchor" href="#diff算法" aria-hidden="true">#</a> diff算法</h3><p>diff算法是一种对比算法,对比的两者是旧虚拟DOM和新虚拟DOM，对比出是哪个虚拟节点发生了更改，并只更新此节点的真实DOM，无需更改其他未修改的节点，提升效率</p><h3 id="diff算法的原理" tabindex="-1"><a class="header-anchor" href="#diff算法的原理" aria-hidden="true">#</a> diff算法的原理</h3><p>新旧虚拟DOM对比时，只会在同层级进行比较，不会跨层级比较</p><p><img src="D:\\学习\\面试刷题\\image\\diff同层对比.png" alt=""></p><h3 id="核心方法" tabindex="-1"><a class="header-anchor" href="#核心方法" aria-hidden="true">#</a> 核心方法</h3><p>patch方法</p><p>使用sameVnode方法对比当前同层的虚拟节点是否为同一类型的标签</p><ul><li>是，继续指向patchVnode方法进行深度比较</li><li>否，不再继续对比，将整个节点替换为新的虚拟节点</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> newVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 比较是否为一个类型的节点</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> newVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 是：继续进行深层比较</span>\n    <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> newVnode<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 否</span>\n    <span class="token keyword">const</span> oldEl <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>el <span class="token comment">// 旧虚拟节点的真实DOM节点</span>\n    <span class="token keyword">const</span> parentEle <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">parentNode</span><span class="token punctuation">(</span>oldEl<span class="token punctuation">)</span> <span class="token comment">// 获取父节点</span>\n    <span class="token function">createEle</span><span class="token punctuation">(</span>newVnode<span class="token punctuation">)</span> <span class="token comment">// 创建新虚拟节点对应的真实DOM节点</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentEle <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      api<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parentEle<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> api<span class="token punctuation">.</span><span class="token function">nextSibling</span><span class="token punctuation">(</span>oEl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 将新元素添加进父元素</span>\n      api<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>parentEle<span class="token punctuation">,</span> oldVnode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>  <span class="token comment">// 移除以前的旧元素节点</span>\n      <span class="token comment">// 设置null，释放内存</span>\n      oldVnode <span class="token operator">=</span> <span class="token keyword">null</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> newVnode\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="samevnode方法" tabindex="-1"><a class="header-anchor" href="#samevnode方法" aria-hidden="true">#</a> sameVnode方法</h3><p>判断新旧虚拟节点是否为同一类型的标签</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sameVnode</span><span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> newVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    oldVnode<span class="token punctuation">.</span>key <span class="token operator">===</span> newVnode<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span> <span class="token comment">// key值是否一样</span>\n    oldVnode<span class="token punctuation">.</span>tagName <span class="token operator">===</span> newVnode<span class="token punctuation">.</span>tagName <span class="token operator">&amp;&amp;</span> <span class="token comment">// 标签名是否一样</span>\n    oldVnode<span class="token punctuation">.</span>isComment <span class="token operator">===</span> newVnode<span class="token punctuation">.</span>isComment <span class="token operator">&amp;&amp;</span> <span class="token comment">// 是否都为注释节点</span>\n    <span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">isDef</span><span class="token punctuation">(</span>newVnode<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment">// 是否都定义了data</span>\n    <span class="token function">sameInputType</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> newVnode<span class="token punctuation">)</span> <span class="token comment">// 当标签为input时，type必须是否相同</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="patchvnode方法" tabindex="-1"><a class="header-anchor" href="#patchvnode方法" aria-hidden="true">#</a> patchVnode方法</h3><ul><li>找到真实的DOM元素,简称el</li><li>如果新旧虚拟节点指向同一个对象则直接返回</li><li>如果新旧虚拟节点都有文本且不一样，则直接将el的文本替换为新虚拟节点的文本</li><li>如果旧虚拟节点有子节点而新虚拟节点没有，则直接删除子节点</li><li>如果新虚拟节点有子节点而就虚拟节点没有，则将新虚拟节点的子节点真实化后添加到el</li><li>如果新旧都有子节点，则使用updateChildren方法比较子节点</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">patchVnode</span><span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> newVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> el <span class="token operator">=</span> newVnode<span class="token punctuation">.</span>el <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>el <span class="token comment">// 获取真实DOM对象</span>\n  <span class="token comment">// 获取新旧虚拟节点的子节点数组</span>\n  <span class="token keyword">const</span> oldCh <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>children<span class="token punctuation">,</span> newCh <span class="token operator">=</span> newVnode<span class="token punctuation">.</span>children\n  <span class="token comment">// 如果新旧虚拟节点是同一个对象，则终止</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode <span class="token operator">===</span> newVnode<span class="token punctuation">)</span> <span class="token keyword">return</span>\n  <span class="token comment">// 如果新旧虚拟节点是文本节点，且文本不一样</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> newVnode<span class="token punctuation">.</span>text <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> oldVnode<span class="token punctuation">.</span>text <span class="token operator">!==</span> newVnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 则直接将真实DOM中文本更新为新虚拟节点的文本</span>\n    api<span class="token punctuation">.</span><span class="token function">setTextContent</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> newVnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 否则</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCh <span class="token operator">&amp;&amp;</span> newCh <span class="token operator">&amp;&amp;</span> oldCh <span class="token operator">!==</span> newCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 新旧虚拟节点都有子节点，且子节点不一样</span>\n\n      <span class="token comment">// 对比子节点，并更新</span>\n      <span class="token function">updateChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> newCh<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 新虚拟节点有子节点，旧虚拟节点没有</span>\n\n      <span class="token comment">// 创建新虚拟节点的子节点，并更新到真实DOM上去</span>\n      <span class="token function">createEle</span><span class="token punctuation">(</span>newVnode<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 旧虚拟节点有子节点，新虚拟节点没有</span>\n\n      <span class="token comment">//直接删除真实DOM里对应的子节点</span>\n      api<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="updatechildren方法" tabindex="-1"><a class="header-anchor" href="#updatechildren方法" aria-hidden="true">#</a> updateChildren方法</h3><p>利用首尾指针法对比</p><p>共有五种比较情况</p><ul><li><p>oldS 和 newS <code>使用</code>sameVnode方法<code>进行比较，</code>sameVnode(oldS, newS)</p></li><li><p>oldS 和 newE <code>使用</code>sameVnode方法<code>进行比较，</code>sameVnode(oldS, newE)</p></li><li><p>oldE 和 newS <code>使用</code>sameVnode方法<code>进行比较，</code>sameVnode(oldS, newE)</p></li><li><p>oldE 和 newE <code>使用</code>sameVnode方法<code>进行比较，</code>sameVnode(oldS, newE)</p></li><li><p>如果以上逻辑都没匹配到,则将所以旧节点的key与新节点的key做比较，如果相同则替换位置，如果没有相同则在oldS指针前新增真实节点</p><p><strong>如果旧节点的指针先重合则代表新节点比旧节点多,剩下的新节点就新增真实节点</strong></p><p><strong>如果新节点的指针先重合则代表新节点比旧节点少,剩下的旧节点就删除</strong></p></li></ul><p><img src="D:\\学习\\面试刷题\\image\\diff更新方法.png" alt=""></p>',32),t=(0,p.Uk)("具体可看[15张图，20分钟吃透Diff算法核心原理，我说的！！！ - 掘金]("),o={href:"https://juejin.cn/post/6994959998283907102#heading-8",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("15张图，20分钟吃透Diff算法核心原理，我说的！！！ - 掘金 (juejin.cn)"),c=(0,p.Uk)(")"),u={},i=(0,a(3744).Z)(u,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("p",null,[t,(0,p._)("a",o,[l,(0,p.Wm)(a)]),c])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);