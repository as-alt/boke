"use strict";(self.webpackChunkaaa=self.webpackChunkaaa||[]).push([[6910],{8563:(n,a,s)=>{s.r(a),s.d(a,{data:()=>p});const p={key:"v-53fae146",path:"/guide/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/VUE/%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/js%E5%AE%9E%E7%8E%B0v-model.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"js实现v-model",slug:"js实现v-model",children:[{level:3,title:"双向绑定本质上就是将输入框的value值指向data中的属性,在通过输入事件将data中的属性指回value值,最终通过监听data对象的set事件保证页面动态更新",slug:"双向绑定本质上就是将输入框的value值指向data中的属性-在通过输入事件将data中的属性指回value值-最终通过监听data对象的set事件保证页面动态更新",children:[]}]}],filePathRelative:"guide/面试刷题/VUE/高级特性/js实现v-model.md",git:{}}},3039:(n,a,s)=>{s.r(a),s.d(a,{default:()=>e});const p=(0,s(6252).uE)('<h2 id="js实现v-model" tabindex="-1"><a class="header-anchor" href="#js实现v-model" aria-hidden="true">#</a> js实现v-model</h2><h3 id="双向绑定本质上就是将输入框的value值指向data中的属性-在通过输入事件将data中的属性指回value值-最终通过监听data对象的set事件保证页面动态更新" tabindex="-1"><a class="header-anchor" href="#双向绑定本质上就是将输入框的value值指向data中的属性-在通过输入事件将data中的属性指回value值-最终通过监听data对象的set事件保证页面动态更新" aria-hidden="true">#</a> 双向绑定本质上就是将输入框的value值指向data中的属性,在通过输入事件将data中的属性指回value值,最终通过监听data对象的set事件保证页面动态更新</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>\n\n<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>\n        msg<span class="token operator">:</span><span class="token string">&#39;&#39;</span>\n    <span class="token punctuation">}</span>\n\t<span class="token keyword">let</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>\n    <span class="token comment">//遍历调用响应式监听</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">reactiveObj</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n     <span class="token punctuation">}</span>\n\t<span class="token keyword">function</span> <span class="token function">reactiveObj</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">//响应式监听</span>\n        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token punctuation">{</span>\n            <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">return</span> value\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                value <span class="token operator">=</span> newValue\n                dom<span class="token punctuation">.</span>innerText <span class="token operator">=</span> value\n                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\t<span class="token keyword">let</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span>\n\tinput<span class="token punctuation">.</span><span class="token function-variable function">oninput</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        data<span class="token punctuation">.</span>msg <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value\n    <span class="token punctuation">}</span>\n\tinput<span class="token punctuation">.</span>value <span class="token operator">=</span> data<span class="token punctuation">.</span>msg\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div>',3),t={},e=(0,s(3744).Z)(t,[["render",function(n,a){return p}]])},3744:(n,a)=>{a.Z=(n,a)=>{const s=n.__vccOpts||n;for(const[n,p]of a)s[n]=p;return s}}}]);