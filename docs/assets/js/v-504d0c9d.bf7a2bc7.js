"use strict";(self.webpackChunkaaa=self.webpackChunkaaa||[]).push([[758],{1358:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-504d0c9d",path:"/guide/js%E9%AB%98%E7%A8%8B%E6%89%8B%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9B%BF%E6%8D%A2%E6%96%B9%E6%B3%95%E6%8A%80%E5%B7%A7.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"字符串替换时，获取正则已匹配的字符串",slug:"字符串替换时-获取正则已匹配的字符串",children:[]}],filePathRelative:"guide/js高程手记/字符串替换方法技巧.md",git:{}}},2455:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(6252).uE)('<h2 id="字符串替换时-获取正则已匹配的字符串" tabindex="-1"><a class="header-anchor" href="#字符串替换时-获取正则已匹配的字符串" aria-hidden="true">#</a> 字符串替换时，获取正则已匹配的字符串</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">&quot;cat, bat, sat, fat&quot;</span><span class="token punctuation">;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">text</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">text.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> text<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(.at)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        result <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(.at)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;word ($1)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// word (cat), word (bat), word (sat), word (fat)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="在replace方法中的第二个参数使用-n获取正则匹配的正则组" tabindex="-1"><a class="header-anchor" href="#在replace方法中的第二个参数使用-n获取正则匹配的正则组" aria-hidden="true">#</a> 在replace方法中的第二个参数使用$n获取正则匹配的正则组</h4><p><img src="/boke/js高程/字符串正则匹配.png" alt=""></p>',4),e={},p=(0,a(3744).Z)(e,[["render",function(n,s){return t}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);