"use strict";(self.webpackChunkaaa=self.webpackChunkaaa||[]).push([[4611],{9929:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-307ae20f",path:"/guide/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/JAVASCRIPT/js%E7%B1%BB%E5%9E%8B%E4%B8%8E%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"js类型以及类型判断",slug:"js类型以及类型判断",children:[]}],filePathRelative:"guide/面试刷题/JAVASCRIPT/js类型与类型判断.md",git:{}}},8699:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(6252).uE)('<h2 id="js类型以及类型判断" tabindex="-1"><a class="header-anchor" href="#js类型以及类型判断" aria-hidden="true">#</a> js类型以及类型判断</h2><h4 id="js类型" tabindex="-1"><a class="header-anchor" href="#js类型" aria-hidden="true">#</a> js类型</h4><p>js类型分为两大类</p><ol><li>基本类型 <ul><li>string(字符类型)</li><li>number(数值类型)</li><li>undefined(有值未定义)</li><li>null(定义了没值)</li><li>boolean(布尔类型)</li><li>symbol()</li><li>bigint()</li></ul></li><li>引用类型 <ul><li>object(对象类型)</li><li>array,function都是特殊的object类型</li></ul></li></ol><h4 id="类型判断" tabindex="-1"><a class="header-anchor" href="#类型判断" aria-hidden="true">#</a> 类型判断</h4><ol><li><p>typeof （返回字符串包裹的小写类型）</p><p>用于判断基本类型,<strong>null类型无效,会返回object类型</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">typeof String</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token comment">//&#39;string&#39;</span>\n       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">typeof Number</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//&#39;number&#39;</span>\n       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">typeof Boolean</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//&#39;boolean&#39;</span>\n       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">typeof undefined</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token comment">//&#39;undefined&#39;</span>\n       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">typeof null</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment">//&#39;object&#39;</span>\n       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">typeof BigInt</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//&#39;bigint&#39;</span>\n       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">typeof Symbol</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//symbol</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>instanceof （返回布尔值）</p><p>用于判断引用类型,<strong>可用此方法判断null</strong></p><p><strong>此方法本质上是在左侧元素的隐式原型链上找右侧元素</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">{} instanceof Object</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token comment">//true</span>\n       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[] instanceof Array</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token comment">//true</span>\n       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[] instanceof Object</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token comment">//true</span>\n       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">function(){} instanceof Function</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token comment">//true</span>\n       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">function(){} instanceof Object</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token comment">//true</span>\n       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">null instanceof Object</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token comment">//false</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>Object.prototype.toString.call()</p></li></ol>',6),p={},e=(0,a(3744).Z)(p,[["render",function(n,s){return t}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);