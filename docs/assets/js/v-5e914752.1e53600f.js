"use strict";(self.webpackChunkaaa=self.webpackChunkaaa||[]).push([[520],{5048:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5e914752",path:"/guide/js%E9%AB%98%E7%BA%A7/%E9%97%AD%E5%8C%85%E7%90%86%E8%A7%A3.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"闭包理解",slug:"闭包理解",children:[]}],filePathRelative:"guide/js高级/闭包理解.md",git:{}}},6140:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h2 id="闭包理解" tabindex="-1"><a class="header-anchor" href="#闭包理解" aria-hidden="true">#</a> 闭包理解</h2><h4 id="什么是闭包" tabindex="-1"><a class="header-anchor" href="#什么是闭包" aria-hidden="true">#</a> 什么是闭包?</h4><p>在一个嵌套函数内部引用了嵌套函数外部的变量（函数）,就产生了闭包</p><p><strong>闭包在函数定义是产生,而不是调用时产生</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n    <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在chrome断点调试中,可以看到在14行断点fn2的作用域中就一起产生了闭包属性（<strong>前提:fn2要调用,嵌套函数内部引用的变量或方法才会进入闭包</strong>）</p><p><img src="/boke/js高级/闭包理解1.png" alt=""></p><p>在16行断点fn2的作用域中</p><p><img src="/boke/js高级/闭包理解2.png" alt=""></p><h4 id="产生闭包的条件" tabindex="-1"><a class="header-anchor" href="#产生闭包的条件" aria-hidden="true">#</a> 产生闭包的条件</h4><p>1.嵌套函数</p><p>2.嵌套函数内部引用了嵌套函数外部的属性或方法</p><p>3.函数执行</p>',13),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);