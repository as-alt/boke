"use strict";(self.webpackChunkaaa=self.webpackChunkaaa||[]).push([[741],{6149:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-7e28bea4",path:"/guide/js%E9%AB%98%E7%BA%A7/%E7%B1%BB%E5%9E%8B%E4%BB%A5%E5%8F%8A%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"类型",slug:"类型",children:[]},{level:2,title:"类型判断",slug:"类型判断",children:[]}],filePathRelative:"guide/js高级/类型以及类型判断.md",git:{}}},9859:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h2 id="类型" tabindex="-1"><a class="header-anchor" href="#类型" aria-hidden="true">#</a> 类型</h2><h4 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型" aria-hidden="true">#</a> 基本类型</h4><p>String :字符串</p><p>Number :数值</p><p>Boolean :true/false</p><p>Undefined :undefined</p><p>Null:null</p><h4 id="引用类型" tabindex="-1"><a class="header-anchor" href="#引用类型" aria-hidden="true">#</a> 引用类型</h4><p>Object :对象，键对值存放，无序</p><p>Array:数组对象,通过数组下标存放,有序</p><p>Function:函数对象,特殊的对象,可执行</p><h2 id="类型判断" tabindex="-1"><a class="header-anchor" href="#类型判断" aria-hidden="true">#</a> 类型判断</h2><p>typeof,可用来判断的类型:String,Number,Boolean,undefined,Function</p><p><strong>注意:基本类型Null使用typeof判断时会被认为是个Object类型</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//typeof 所返回的值是小写的字符串类型的数据,这里使用的是全等符 === 判断,不做类型转换,所以为false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span><span class="token keyword">typeof</span> <span class="token string">&#39;tom&#39;</span> <span class="token operator">===</span> string<span class="token punctuation">)</span><span class="token comment">//&#39;string&#39;,false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token comment">//&#39;number&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//&#39;boolean&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token comment">//&#39;undefined&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//&#39;function&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment">//&#39;object&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>instanceof,可用来判断的类型:Object,Array,Function,Null</p><p><strong>注意:instanceof是用来判断变量或值是否为引用类型的实例,Array和Function都是特殊的对象,所以他们的值也指向Object实例</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span><span class="token string">&#39;小陈&#39;</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">,</span>\n    a1<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>console<span class="token punctuation">.</span>log<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">a2</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">,</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token comment">//true,false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>a1 <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>a1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token comment">//true,true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>a2 <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>a2 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token comment">//true,true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token comment">//false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>===,可用来判断的类型:undefined,null</p><p><strong>注意:这里利用的时全等符===不会进行类型转换的特性,可用来判断undefined和null这种只有单个固定数值的类型</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> a<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token comment">//true</span>\na <span class="token operator">=</span> <span class="token keyword">null</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment">//true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',21),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);